{"version":3,"file":"graphql.interceptor.js","sourceRoot":"/","sources":["graphql.interceptor.ts"],"names":[],"mappings":";;;;;;;;;AAAA,2CAA4C;AAI5C,uCAAwC;AAExC,wBAAsC;AAEtC,IAAI,mBAAwB,CAAC;AAC7B,IAAI;IACF,CAAC,EAAE,mBAAmB,EAAE,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;CACxD;AAAC,OAAO,CAAC,EAAE,GAAE;AAGd,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,oBAAiB;IAC7C,gBAAgB,CACxB,OAAyB,EACzB,KAAY,EACZ,SAAc;QAEd,IAAI,OAAO,CAAC,OAAO,EAAkB,KAAK,SAAS,EAAE;YACnD,IAAI,CAAC,uBAAuB,CAC1B,KAAK,EACL,mBAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,EACnC,SAAS,CACV,CAAC;SACH;aAAM;YACL,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;SACnD;IACH,CAAC;IAEO,uBAAuB,CAC7B,KAAY,EACZ,UAAsC,EACtC,SAAc;QAEd,MAAM,IAAI,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC;QAClC,MAAM,OAAO,GAAG,UAAU,CAAC,UAAU,EAAE,CAAC;QAExC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAE7C,IAAI,OAAO,CAAC,GAAG,EAAE;YAEf,MAAM,IAAI,GAAG,eAAQ,CAAC,YAAY,CAAM,EAAE,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAE7D,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAEpC,IAAI,IAAI,CAAC,KAAK;gBAAE,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC5C,IAAI,IAAI,CAAC,IAAI;gBAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACzC;QAED,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;IACrD,CAAC;CACF,CAAA;AAvCY,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;GACA,kBAAkB,CAuC9B;AAvCY,gDAAkB","sourcesContent":["import { Injectable } from '@nestjs/common';\nimport type { ExecutionContext } from '@nestjs/common';\nimport type { GqlContextType } from '@nestjs/graphql';\nimport { Scope } from '@sentry/hub';\nimport { Handlers } from '@sentry/node';\n\nimport { SentryInterceptor } from '.';\n\nlet GqlExecutionContext: any;\ntry {\n  ({ GqlExecutionContext } = require('@nestjs/graphql'));\n} catch (e) {}\n\n@Injectable()\nexport class GraphqlInterceptor extends SentryInterceptor {\n  protected captureException(\n    context: ExecutionContext,\n    scope: Scope,\n    exception: any,\n  ) {\n    if (context.getType<GqlContextType>() === 'graphql') {\n      this.captureGraphqlException(\n        scope,\n        GqlExecutionContext.create(context),\n        exception,\n      );\n    } else {\n      super.captureException(context, scope, exception);\n    }\n  }\n\n  private captureGraphqlException(\n    scope: Scope,\n    gqlContext: typeof GqlExecutionContext,\n    exception: any,\n  ): void {\n    const info = gqlContext.getInfo();\n    const context = gqlContext.getContext();\n\n    scope.setExtra('type', info.parentType.name);\n\n    if (context.req) {\n      // req within graphql context needs modification in\n      const data = Handlers.parseRequest(<any>{}, context.req, {});\n\n      scope.setExtra('req', data.request);\n\n      if (data.extra) scope.setExtras(data.extra);\n      if (data.user) scope.setUser(data.user);\n    }\n\n    this.client.instance().captureException(exception);\n  }\n}\n"]}