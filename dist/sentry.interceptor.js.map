{"version":3,"file":"sentry.interceptor.js","sourceRoot":"/","sources":["sentry.interceptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Injectable } from '@nestjs/common';\nimport type {\n  CallHandler,\n  ExecutionContext,\n  NestInterceptor,\n} from '@nestjs/common';\nimport type {\n  HttpArgumentsHost,\n  WsArgumentsHost,\n  RpcArgumentsHost,\n  ContextType,\n} from '@nestjs/common/interfaces';\nimport { Scope } from '@sentry/hub';\nimport { Handlers } from '@sentry/node';\n\nimport { SentryService } from './sentry.service';\nimport type {\n  SentryInterceptorOptions,\n  SentryInterceptorOptionsFilter,\n} from './sentry.interfaces';\n\n@Injectable()\nexport class SentryInterceptor implements NestInterceptor {\n  protected readonly client: SentryService =\n    SentryService.SentryServiceInstance();\n  constructor(private readonly options?: SentryInterceptorOptions) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    // first param would be for events, second is for errors\n    return next.handle().pipe(\n      tap(null, (exception) => {\n        if (this.shouldReport(exception)) {\n          this.client.instance().withScope((scope) => {\n            this.captureException(context, scope, exception);\n          });\n        }\n      }),\n    );\n  }\n\n  protected captureException(\n    context: ExecutionContext,\n    scope: Scope,\n    exception: any,\n  ) {\n    switch (context.getType<ContextType>()) {\n      case 'http':\n        return this.captureHttpException(\n          scope,\n          context.switchToHttp(),\n          exception,\n        );\n      case 'rpc':\n        return this.captureRpcException(\n          scope,\n          context.switchToRpc(),\n          exception,\n        );\n      case 'ws':\n        return this.captureWsException(scope, context.switchToWs(), exception);\n    }\n  }\n\n  private captureHttpException(\n    scope: Scope,\n    http: HttpArgumentsHost,\n    exception: any,\n  ): void {\n    const data = Handlers.parseRequest(\n      <any>{},\n      http.getRequest(),\n      this.options,\n    );\n\n    scope.setExtra('req', data.request);\n\n    if (data.extra) scope.setExtras(data.extra);\n    if (data.user) scope.setUser(data.user);\n\n    this.client.instance().captureException(exception);\n  }\n\n  private captureRpcException(\n    scope: Scope,\n    rpc: RpcArgumentsHost,\n    exception: any,\n  ): void {\n    scope.setExtra('rpc_data', rpc.getData());\n\n    this.client.instance().captureException(exception);\n  }\n\n  private captureWsException(\n    scope: Scope,\n    ws: WsArgumentsHost,\n    exception: any,\n  ): void {\n    scope.setExtra('ws_client', ws.getClient());\n    scope.setExtra('ws_data', ws.getData());\n\n    this.client.instance().captureException(exception);\n  }\n\n  private shouldReport(exception: any) {\n    if (this.options && !this.options.filters) return true;\n\n    // If all filters pass, then we do not report\n    if (this.options) {\n      const opts: SentryInterceptorOptions = this.options as {};\n      if (opts.filters) {\n        let filters: SentryInterceptorOptionsFilter[] = opts.filters;\n        return filters.every(({ type, filter }) => {\n          return !(exception instanceof type && (!filter || filter(exception)));\n        });\n      }\n    } else {\n      return true;\n    }\n  }\n}\n"]}