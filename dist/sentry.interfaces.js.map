{"version":3,"file":"sentry.interfaces.js","sourceRoot":"/","sources":["sentry.interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import type { ConsoleLoggerOptions } from '@nestjs/common';\nimport type { ModuleMetadata, Type } from '@nestjs/common/interfaces';\nimport { Severity } from '@sentry/node';\nimport type { Integration, Options } from '@sentry/types';\n\nexport interface SentryCloseOptions {\n  enabled: boolean;\n  // timeout â€“ Maximum time in ms the client should wait until closing forcefully\n  timeout?: number;\n}\n\nexport type SentryModuleOptions = Omit<Options, 'integrations'> & {\n  integrations?: Integration[];\n  close?: SentryCloseOptions;\n} & ConsoleLoggerOptions;\n\nexport interface SentryOptionsFactory {\n  createSentryModuleOptions():\n    | Promise<SentryModuleOptions>\n    | SentryModuleOptions;\n}\n\nexport interface SentryModuleAsyncOptions\n  extends Pick<ModuleMetadata, 'imports'> {\n  inject?: any[];\n  useClass?: Type<SentryOptionsFactory>;\n  useExisting?: Type<SentryOptionsFactory>;\n  useFactory?: (\n    ...args: any[]\n  ) => Promise<SentryModuleOptions> | SentryModuleOptions;\n}\n\nexport type SentryTransaction = boolean | 'path' | 'methodPath' | 'handler';\n\nexport interface SentryFilterFunction {\n  (exception: any): boolean;\n}\n\nexport interface SentryInterceptorOptionsFilter {\n  type: any;\n  filter?: SentryFilterFunction;\n}\n\nexport interface SentryInterceptorOptions {\n  filters?: SentryInterceptorOptionsFilter[];\n  tags?: { [key: string]: string };\n  extra?: { [key: string]: any };\n  fingerprint?: string[];\n  level?: Severity;\n\n  // https://github.com/getsentry/sentry-javascript/blob/master/packages/node/src/handlers.ts#L163\n  request?: boolean;\n  serverName?: boolean;\n  transaction?: boolean | 'path' | 'methodPath' | 'handler'; // https://github.com/getsentry/sentry-javascript/blob/master/packages/node/src/handlers.ts#L16\n  user?: boolean | string[];\n  version?: boolean;\n}\n"]}